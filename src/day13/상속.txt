객체 : (추상적인) 물리적으로 존재하거나 개념적인 것 중에서 식별 가능한것
	객체 : 속성/필드, 동작/메소드 으로 구성

			머리 (이거 이거 저장해야지)
			  |
			  |	공통적인 속성이나 동작을 가누려서 설계 ( 모델링 )
			  |	VIP회원	일반회원	골드회원
				id		id	id
				pw		pw	pw
				name		name	name
				구독()		구독()	구독()
				- 차별
				특별구독()	마일리지
				포인트


클래스 : 객체를 새성할때에는 설계도 필요
인스턴스 : (실제 메모리할당) 클래스로 부터 생성된 객체

상속 p.284
    - 부모가 자식에게 물려주는 행위
    - 정의 : 객체지향에서도 부모 클래스의 필드와 메소드를 자식 클래스 에게 물려줄수있다.
    - 사용목적 :
            1. 이미 잘 개발된 클래스를 재사용
            2. 새로운 클래스를 만들기 때문에 중복 코드를 줄일수 있다.
            3. 개발 시간 단축
    - ★★★ 자식 객체를 힙 영역 메모리 할당할때 부모 객체도 힙 영역에 메모리를 할당 한다.

    - 키워드 : extends
            1. 자식/하위/서브 클래스 extends 슈퍼/상위/부모 {}   ★ 주의! 단 하나의 상속만 받기만 가능! -> 부모 위에 부모는 가능!
    - 사용방법
            1. 자식클래스가 부모클래스를 선택
                 class 자식클래스명 extends 부모클래스명{}
            2. 자식클래스 선언할때 extends 이용한 부모 클래스 상속 받기

    - 부모 생성자 호출
            super()
    - 메서드 재정의 [ 오버라이딩 ]
            1. 부모 메서드의 선언부 동일
            2. 접근제한을 더 강하게 할수 없다.
            3. 부모 메서드 보다 예외처리가 더 많을수 없다.
                @Override
    - 부모 메소드 호출
            - 자식 객체가 생성될때 부모객체 우선적으로 생성
            super.메소드()

    - final : 최종적 뜻 갖는 키워드
            - 필드   : 필드의 값 수정 불가능
                    String final 필드명            - 필드 값 고정
                    String static final 필드명     - 프로그램 전체에서 1개만 갖는 필드 => 상수
            - 클래스 : 상속불가 클래스 만들기
                    public final class 클래스명{}   - 해당 클래스는 부모클래스가 될수 없다.
            - 메소드 : 오버라이딩 불가
                    public final void 메소드명(){}  - 만약에 상속을 받았을때  재정의(오버라이딩) 불가 메소드

    - 접근제한자
            -
            public          : 필드 , 생성자 , 메소드 , 클래스          : 프로젝트 내 모든 구역 호출 가능
            private         : 필드 , 생성자 , 메소드                  : 클래스 내부 에서만 호출 가능
            protected       : 필드 , 생성자 , 메소드                  : 동일 패키지 + 자식객체만 사용 가능
            (default)       : 필드 , 생성자 , 메소드 , 클래스          : 동일 패키지 호출 가능

    =============================================================================================================

    - 클래스에서 사용 되는 키워드들

        접근제한자 : public/private/protected/(default)
        정적 : static
        최종 : final
        현재객체 : this
        상위객체 : super
        상속 : extends

        - 클래스 선언
                접근제한자[public/(default)]          - 1. 접근제한자 선택한다.
                final                               - 2. 해당 클래스를 부모클래스로 사용할 여부 선택한다.
                클래스명                              - 3. 클래스명 ( 첫글자 대문자로 하는 카멜 표기법 )
                extends 상위클래스{}                  - 4. 부모클래스로 상속 받을지 선택한다
        - 필드 선언
                접근제한자[public/private/protected/(default)]       - 1. 접근제한자 선택한다.
                정적[static]/인스턴스                                 - 2. 정적멤버 vs 인스턴스멤버
                final                                              - 3. 필드의 값을 수정 가능 여부 선택
                타입[기본/참조]                                      - 4. 기본타입 vs 참조타입( 클래스 , 배열 , 인터페이스 )
                필드명                                              - 5. 첫글자를 소문자로 하는 카멜 표기법 사용
                                                                   - 상수( static final ) 필드명 : 대문자
        - 생성자 선언
                - 오버로딩 지원
                접근제한자[public/private/protected/(default)]       - 1. 접근제한자를 선택한다.
                클래스 = 생성자명( 매개변수 ){}                        - 2. 생성자명 = 클래스명 동일
        - 메소드 선언
                - 오버로딩 / 오버리이딩 지원
                접근제한자[public/private/protected/(default)]       - 1. 접근제한자 선택한다.
                정적[static]/인스턴스                                - 2. 정적멤버 vs 인스턴스 멤버
                final                                              - 3. 자식 클래스가 메소드를 재정의(오버라이딩) 가능
                반환타입[기본/참조]                                   - 4. 메소드가 종료(return) 될때 반환할 같의 타입
                메소드명(매개변수){}                                  - 5. 메소드명 첫글자 소문자로 하는 카멜 표기법

    ==============================================================================================================

